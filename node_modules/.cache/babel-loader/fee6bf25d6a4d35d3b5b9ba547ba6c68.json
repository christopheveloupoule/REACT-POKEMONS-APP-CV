{"ast":null,"code":"var _jsxFileName = \"/home/christophe/REACT-POKEMONS-APP-CV/src/components/pokemon-card.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport './pokemon-card.css';\nimport formatDate from '../helpers/format-date';\nimport formatType from '../helpers/format-type';\nimport { useHistory } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PokemonCard = ({\n  pokemon,\n  borderColor = '#009688'\n}) => {\n  _s();\n\n  const [color, setColor] = useState(); //couleur crte ds le State 'color'\n\n  const history = useHistory();\n  /*on recupere un {} representant l'history du navigateur\n  depuis le hook que ns venons d'importer*/\n\n  const showBorder = () => {\n    setColor(borderColor); // valeur initial de la prop save ds borderColor\n  };\n\n  const hideBorder = () => {\n    setColor('#f5f5f5'); // we put border in grey color\n  };\n  /*const formatDate = (date: Date= new Date()): string => { //on ajoute une date par def avc \"new Date\" comme fct°\n      return `${date.getDate()}/${date.getMonth()+1}/${date.getFullYear()}`;\n  }*/\n\n\n  const goToPokemon = id => {\n    //nvelle method de gestionnaire d'event\n    history.push(`/pokemons/${id}`); //METHOD push et en param, chemin vers lequel on souhaite se rendre\n  }; //nvelle method de gestionn d'event qui prend en param\n  //l'id du pokemon vers lequel on souhaite ré-effectuer une redirect°\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"col s6 m4\",\n    onMouseEnter: showBorder,\n    onMouseLeave: hideBorder,\n    onClick: () => goToPokemon(pokemon.id),\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card horizontal\",\n      style: {\n        borderColor: color\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-image\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: pokemon.picture,\n          alt: pokemon.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-stacked\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: pokemon.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: /*#__PURE__*/_jsxDEV(\"small\", {\n              children: formatDate(pokemon.created)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 45,\n              columnNumber: 20\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 17\n          }, this), pokemon.types.map(type => /*#__PURE__*/_jsxDEV(\"span\", {\n            className: formatType(type),\n            children: type\n          }, type, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 21\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 9\n  }, this);\n};\n\n_s(PokemonCard, \"nmprnW86+m0r42mJ5w56oVai7yE=\", false, function () {\n  return [useHistory];\n});\n\n_c = PokemonCard;\nexport default PokemonCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"PokemonCard\");","map":{"version":3,"sources":["/home/christophe/REACT-POKEMONS-APP-CV/src/components/pokemon-card.tsx"],"names":["React","useState","formatDate","formatType","useHistory","PokemonCard","pokemon","borderColor","color","setColor","history","showBorder","hideBorder","goToPokemon","id","push","picture","name","created","types","map","type"],"mappings":";;;AAAA,OAAOA,KAAP,IAAmCC,QAAnC,QAAmD,OAAnD;AAEA,OAAO,oBAAP;AACA,OAAOC,UAAP,MAAuB,wBAAvB;AACA,OAAOC,UAAP,MAAuB,wBAAvB;AACA,SAASC,UAAT,QAA2B,kBAA3B;;;AAOA,MAAMC,WAAqC,GAAG,CAAC;AAACC,EAAAA,OAAD;AAAUC,EAAAA,WAAW,GAAG;AAAxB,CAAD,KAAwC;AAAA;;AAClF,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAmBR,QAAQ,EAAjC,CADkF,CACrC;;AAC7C,QAAMS,OAAO,GAAGN,UAAU,EAA1B;AAA8B;AAClC;;AAEI,QAAMO,UAAU,GAAG,MAAM;AACrBF,IAAAA,QAAQ,CAACF,WAAD,CAAR,CADqB,CACE;AAC1B,GAFD;;AAIA,QAAMK,UAAU,GAAG,MAAM;AACvBH,IAAAA,QAAQ,CAAC,SAAD,CAAR,CADuB,CACF;AACtB,GAFD;AAIA;AACJ;AACA;;;AAEI,QAAMI,WAAW,GAAIC,EAAD,IAAgB;AAAE;AACpCJ,IAAAA,OAAO,CAACK,IAAR,CAAc,aAAYD,EAAG,EAA7B,EADkC,CACD;AAClC,GAFD,CAjBkF,CAoBtF;AACA;;;AAEI,sBACI;AAAK,IAAA,SAAS,EAAC,WAAf;AAA2B,IAAA,YAAY,EAAEH,UAAzC;AAAqD,IAAA,YAAY,EAAEC,UAAnE;AAA+E,IAAA,OAAO,EAAE,MAAMC,WAAW,CAACP,OAAO,CAACQ,EAAT,CAAzG;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAiC,MAAA,KAAK,EAAE;AAAEP,QAAAA,WAAW,EAAEC;AAAf,OAAxC;AAAA,8BACE;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA,+BACE;AAAK,UAAA,GAAG,EAAEF,OAAO,CAACU,OAAlB;AAA2B,UAAA,GAAG,EAAEV,OAAO,CAACW;AAAxC;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF,eAIE;AAAK,QAAA,SAAS,EAAC,cAAf;AAAA,+BACE;AAAK,UAAA,SAAS,EAAC,cAAf;AAAA,kCACE;AAAA,sBAAIX,OAAO,CAACW;AAAZ;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AAAA,mCAAG;AAAA,wBAAQf,UAAU,CAACI,OAAO,CAACY,OAAT;AAAlB;AAAA;AAAA;AAAA;AAAA;AAAH;AAAA;AAAA;AAAA;AAAA,kBAFF,EAIGZ,OAAO,CAACa,KAAR,CAAcC,GAAd,CAAkBC,IAAI,iBACnB;AAAiB,YAAA,SAAS,EAAElB,UAAU,CAACkB,IAAD,CAAtC;AAAA,sBAA+CA;AAA/C,aAAWA,IAAX;AAAA;AAAA;AAAA;AAAA,kBADH,CAJH;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADJ;AAmBC,CA1CL;;GAAMhB,W;UAEcD,U;;;KAFdC,W;AA4CN,eAAeA,WAAf","sourcesContent":["import React, { FunctionComponent, useState } from 'react';\nimport Pokemon from '../models/pokemon';\nimport './pokemon-card.css';\nimport formatDate from '../helpers/format-date';\nimport formatType from '../helpers/format-type';\nimport { useHistory } from 'react-router-dom';\n\ntype Props = { //On def un nouveau type pr typescript\n    pokemon: Pokemon\n    borderColor?: string // syntax propre à TS, variable is faculatif\n  };\n  \nconst PokemonCard: FunctionComponent<Props> = ({pokemon, borderColor = '#009688'}) => {\n    const [color, setColor]= useState<string>(); //couleur crte ds le State 'color'\n    const history = useHistory(); /*on recupere un {} representant l'history du navigateur\n    depuis le hook que ns venons d'importer*/\n\n    const showBorder = () => {\n        setColor(borderColor); // valeur initial de la prop save ds borderColor\n    }\n  \n    const hideBorder = () => {\n      setColor('#f5f5f5'); // we put border in grey color\n    }\n\n    /*const formatDate = (date: Date= new Date()): string => { //on ajoute une date par def avc \"new Date\" comme fct°\n        return `${date.getDate()}/${date.getMonth()+1}/${date.getFullYear()}`;\n    }*/\n\n    const goToPokemon = (id: number) => { //nvelle method de gestionnaire d'event\n      history.push(`/pokemons/${id}`); //METHOD push et en param, chemin vers lequel on souhaite se rendre\n    }\n//nvelle method de gestionn d'event qui prend en param\n//l'id du pokemon vers lequel on souhaite ré-effectuer une redirect°\n\n    return (\n        <div className=\"col s6 m4\" onMouseEnter={showBorder} onMouseLeave={hideBorder} onClick={() => goToPokemon(pokemon.id)}>\n          <div className=\"card horizontal\" style={{ borderColor: color }}>\n            <div className=\"card-image\"> \n              <img src={pokemon.picture} alt={pokemon.name}/>\n            </div>\n            <div className=\"card-stacked\">\n              <div className=\"card-content\">\n                <p>{pokemon.name}</p>\n                <p><small>{formatDate(pokemon.created)}</small></p>\n                {/*<p><small>{pokemon.created.toString()}</small></p>*/}\n                {pokemon.types.map(type => (\n                    <span key={type} className={formatType(type)}>{type}</span>\n                ))}\n              </div>\n            </div>\n          </div> \n        </div>\n      );\n    }\n  \nexport default PokemonCard;"]},"metadata":{},"sourceType":"module"}