{"ast":null,"code":"export default class PokemonService {\n  //ajout de la req qui permet de recup ts les pok ds la methode getPokemons()\n  // la method retourne le resultat del aMETHO fetch qui est une prommess contenant un []\n  //de pokemons d'ou le type Promise<Pokemon[]>\n  static getPokemons() {\n    return fetch('http://localhost:3001/pokemons').then(response => response.json());\n  }\n\n  static getPokemon(id) {\n    //renvoi soit une pok ou une val null (| en tp)\n    return fetch(`http://localhost:3001/pokemons/${id}`) //recupe un seul pok via son id \n    .then(response => response.json()).then(data => this.isEmpty(data) ? null : data); //METHOD isEmpty\n  }\n\n  static isEmpty(data) {\n    return Object.keys(data).length === 0;\n  }\n\n}\n/*Method static: propre à la POO en general\n(Method non rattaché aux instance de notre class\nmais à la class elle meme!)*/\n\n/*Methode traditionnelle:\nconst service = new PokemonService();on recupe notre service\nconst pokemonsPromise = service.getPokemons();on recupe la promesse\npokemonsPromise.then(pokemons => console.info(pokemons));on affiche\nMethode static : \nPokemonsService.getPokemons().then(pokemons => console.info(pokemons));*/","map":{"version":3,"sources":["/home/christophe/REACT-POKEMONS-APP-CV/src/services/pokemon-service.ts"],"names":["PokemonService","getPokemons","fetch","then","response","json","getPokemon","id","data","isEmpty","Object","keys","length"],"mappings":"AAEA,eAAe,MAAMA,cAAN,CAAqB;AAEpC;AACA;AACA;AACoB,SAAXC,WAAW,GAAuB;AACvC,WAAOC,KAAK,CAAC,gCAAD,CAAL,CACJC,IADI,CACCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADb,CAAP;AAED;;AAEgB,SAAVC,UAAU,CAACC,EAAD,EAAoC;AAAE;AACrD,WAAOL,KAAK,CAAE,kCAAiCK,EAAG,EAAtC,CAAL,CAA8C;AAA9C,KACJJ,IADI,CACCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADb,EAEJF,IAFI,CAECK,IAAI,IAAI,KAAKC,OAAL,CAAaD,IAAb,IAAqB,IAArB,GAA4BA,IAFrC,CAAP,CADmD,CAGD;AACnD;;AAEa,SAAPC,OAAO,CAACD,IAAD,EAAwB;AACpC,WAAOE,MAAM,CAACC,IAAP,CAAYH,IAAZ,EAAkBI,MAAlB,KAA6B,CAApC;AACD;;AAlBiC;AAqBpC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import Pokemon from \"../models/pokemon\";\n \nexport default class PokemonService {\n\n//ajout de la req qui permet de recup ts les pok ds la methode getPokemons()\n// la method retourne le resultat del aMETHO fetch qui est une prommess contenant un []\n//de pokemons d'ou le type Promise<Pokemon[]>\n  static getPokemons(): Promise<Pokemon[]> { \n    return fetch('http://localhost:3001/pokemons')\n      .then(response => response.json());\n  }\n \n  static getPokemon(id: number): Promise<Pokemon|null> { //renvoi soit une pok ou une val null (| en tp)\n    return fetch(`http://localhost:3001/pokemons/${id}`) //recupe un seul pok via son id \n      .then(response => response.json())\n      .then(data => this.isEmpty(data) ? null : data) //METHOD isEmpty\n  }\n \n  static isEmpty(data: Object): boolean {\n    return Object.keys(data).length === 0;\n  }\n}\n\n/*Method static: propre à la POO en general\n(Method non rattaché aux instance de notre class\nmais à la class elle meme!)*/\n\n/*Methode traditionnelle:\nconst service = new PokemonService();on recupe notre service\nconst pokemonsPromise = service.getPokemons();on recupe la promesse\npokemonsPromise.then(pokemons => console.info(pokemons));on affiche\nMethode static : \nPokemonsService.getPokemons().then(pokemons => console.info(pokemons));*/"]},"metadata":{},"sourceType":"module"}