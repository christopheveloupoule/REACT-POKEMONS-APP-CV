{"ast":null,"code":"var _jsxFileName = \"/home/christophe/REACT-POKEMONS-APP-CV/src/pages/pokemon-edit.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport PokemonForm from '../components/pokemon-form';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\n/*ns declarons un \"type\" pr une \"propriete\" nommer id qui correspond\nà l'id du pokemon à éditer. Ns passons cette propriete au composant*/\nconst PokemonEdit = ({\n  match\n}) => {\n  _s();\n\n  const [pokemon, setPokemon] = useState(null);\n  /*Ns chargeons le bon pokemon ds notre STATE, celui l' id passé depuis l'URL*/\n\n  useEffect(() => {\n    /*Realatif a la cst POKEMONS (mock-pokemon.ts)\n    POKEMONS.forEach(pokemon => {\n      if (match.params.id === pokemon.id.toString()) {\n        setPokemon(pokemon); //Verification si le user request un pokemon avec un id qui existe,\n      } //si ok on place le pokemon ds le STATE de notre composant sinn on ne fait rien dc {}vide\n    })*/\n    //on recupe des pokemons depuis notre APIREST et on les place dans le STATE de notre composant\n    fetch(`http://localhost:3001/pokemons/${match.params.id}`) //requete de type GET en lui passant une URL\n    .then(response => response.json()) //on recupe un {}response de la part de notre méthode FETCH & methode json sur cet reponse pr extraire les datas\n    .then(pokemon => {\n      //MAJ du pokemon ds ns composants\n      if (pokemon.id) setPokemon(pokemon); //Verification si le user request un pokemon avec un id qui existe, \n    }); //si ok on place le pokemon ds le STATE de notre composant sinn renvoi un {} vide\n  }, [match.params.id]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: pokemon ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"header center\",\n        children: [\"\\xC9diter \", pokemon.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(PokemonForm, {\n        pokemon: pokemon\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"h4\", {\n      className: \"center\",\n      children: \"Aucun pok\\xE9mon \\xE0 afficher !\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PokemonEdit, \"cYyGFEpoV+taaQmIEbPwGxCid+w=\");\n\n_c = PokemonEdit;\nexport default PokemonEdit;\n\nvar _c;\n\n$RefreshReg$(_c, \"PokemonEdit\");","map":{"version":3,"sources":["/home/christophe/REACT-POKEMONS-APP-CV/src/pages/pokemon-edit.tsx"],"names":["React","useState","useEffect","PokemonForm","PokemonEdit","match","pokemon","setPokemon","fetch","params","id","then","response","json","name"],"mappings":";;;AAAA,OAAOA,KAAP,IAAmCC,QAAnC,EAA6CC,SAA7C,QAA8D,OAA9D;AAEA,OAAOC,WAAP,MAAwB,4BAAxB;;;AAMA;AACA;AACA,MAAMC,WAA2D,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAe;AAAA;;AAEjF,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBN,QAAQ,CAAe,IAAf,CAAtC;AAEA;;AACAC,EAAAA,SAAS,CAAC,MAAM;AACd;AACJ;AACA;AACA;AACA;AACA;AACI;AACAM,IAAAA,KAAK,CAAE,kCAAiCH,KAAK,CAACI,MAAN,CAAaC,EAAI,EAApD,CAAL,CAA4D;AAA5D,KACCC,IADD,CACMC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADlB,EACmC;AADnC,KAECF,IAFD,CAEML,OAAO,IAAI;AAAE;AACjB,UAAGA,OAAO,CAACI,EAAX,EAAeH,UAAU,CAACD,OAAD,CAAV,CADA,CACqB;AACrC,KAJD,EARc,CAYX;AACJ,GAbQ,EAaN,CAACD,KAAK,CAACI,MAAN,CAAaC,EAAd,CAbM,CAAT;AAeA,sBACE;AAAA,cACIJ,OAAO,gBACP;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA,8BAEI;AAAI,QAAA,SAAS,EAAC,eAAd;AAAA,iCAAuCA,OAAO,CAACQ,IAA/C;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI,QAAC,WAAD;AAAa,QAAA,OAAO,EAAER;AAAtB;AAAA;AAAA;AAAA;AAAA,cAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADO,gBAQP;AAAI,MAAA,SAAS,EAAC,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AATJ;AAAA;AAAA;AAAA;AAAA,UADF;AAcD,CAlCD;;GAAMF,W;;KAAAA,W;AAoCN,eAAeA,WAAf","sourcesContent":["import React, { FunctionComponent, useState, useEffect } from 'react';\nimport { RouteComponentProps } from 'react-router-dom';\nimport PokemonForm from '../components/pokemon-form';\nimport Pokemon from '../models/pokemon';\nimport POKEMONS from '../models/mock-pokemon';\n\n \ntype Params = { id: string };\n/*ns declarons un \"type\" pr une \"propriete\" nommer id qui correspond\nà l'id du pokemon à éditer. Ns passons cette propriete au composant*/\nconst PokemonEdit: FunctionComponent<RouteComponentProps<Params>> = ({ match }) => {\n    \n  const [pokemon, setPokemon] = useState<Pokemon|null>(null);\n \n  /*Ns chargeons le bon pokemon ds notre STATE, celui l' id passé depuis l'URL*/\n  useEffect(() => {\n    /*Realatif a la cst POKEMONS (mock-pokemon.ts)\n    POKEMONS.forEach(pokemon => {\n      if (match.params.id === pokemon.id.toString()) {\n        setPokemon(pokemon); //Verification si le user request un pokemon avec un id qui existe,\n      } //si ok on place le pokemon ds le STATE de notre composant sinn on ne fait rien dc {}vide\n    })*/\n    //on recupe des pokemons depuis notre APIREST et on les place dans le STATE de notre composant\n    fetch(`http://localhost:3001/pokemons/${match.params.id }`) //requete de type GET en lui passant une URL\n    .then(response => response.json()) //on recupe un {}response de la part de notre méthode FETCH & methode json sur cet reponse pr extraire les datas\n    .then(pokemon => { //MAJ du pokemon ds ns composants\n      if(pokemon.id) setPokemon(pokemon); //Verification si le user request un pokemon avec un id qui existe, \n    }) //si ok on place le pokemon ds le STATE de notre composant sinn renvoi un {} vide\n  }, [match.params.id]);\n    \n  return (\n    <div>\n      { pokemon ? (\n        <div className=\"row\">\n            {/*Integre de 2élements, le titre puis le formulaire d'edit°,pokemon-form*/}\n            <h2 className=\"header center\">Éditer { pokemon.name }</h2>\n            <PokemonForm pokemon={pokemon}></PokemonForm>\n            {/*on def une 'prop' pokemon pr passer au formulaire l'objet pokemon à editer*/}\n        </div>\n      ) : (\n        <h4 className=\"center\">Aucun pokémon à afficher !</h4>\n      )}\n    </div>\n  );\n}\n  \nexport default PokemonEdit;"]},"metadata":{},"sourceType":"module"}