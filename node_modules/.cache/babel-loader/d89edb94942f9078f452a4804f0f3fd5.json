{"ast":null,"code":"var _jsxFileName = \"/home/christophe/REACT-POKEMONS-APP-CV/src/components/pokemon-form.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport formatType from '../helpers/format-type';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\n//Combinaison de ces 2 types permettra de structurer le state utiliser pr notre 'form' d'edition\n//on cree un state pour modeliser les données qui vt etre gerer pr le form d'edition\nconst PokemonForm = ({\n  pokemon\n}) => {\n  _s();\n\n  const [form, setForm] = useState({\n    //données uniquemnt present ds le state\n    name: {\n      value: pokemon.name,\n      isValid: true\n    },\n    hp: {\n      value: pokemon.hp,\n      isValid: true\n    },\n    cp: {\n      value: pokemon.cp,\n      isValid: true\n    },\n    types: {\n      value: pokemon.types,\n      isValid: true\n    }\n  });\n  const history = useHistory();\n  const types = [//contain all free pokemon to display in a form\n  'Plante', 'Feu', 'Eau', 'Insecte', 'Normal', 'Electrik', 'Poison', 'Fée', 'Vol', 'Combat', 'Psy'];\n  /*Methode renvoi un simple 'boolean' permettant de savoir si le type\n  passé en paramètre appartient ou non à un pokemon\n  Methode JS native \"includes\" pr determiner si un type appartient\n  à un type de pokemon ou non, cette methode renvoi d'elle meme un booleen\n  puis application de la méthode pr cocher/decocher la case*/\n\n  const hasType = type => {\n    return form.types.value.includes(type);\n  };\n\n  const handleInputChange = e => {\n    const fieldName = e.target.name;\n    /* nm du chp  à modifier*/\n\n    const fieldValue = e.target.value;\n    /*Valeur saisie par le user*/\n\n    const newField = {\n      [fieldName]: {\n        value: fieldValue\n      }\n    }; //regroupement des nouvelles valeurs saisies\n\n    setForm({ ...form,\n      ...newField\n    });\n  };\n  /*on modifie l'etat de notre formulaire grace à la méthode 'setForm' fournit pr le hookState\n  spread operator pr fusionner 2 objets, nouvelle donnée 'newField' ecrase la précédente*/\n\n  /*MAJ de notre STATE lorsque le USER va cocher/decocher la case \n  lors de l'interaction avec un type de pokemon*/\n\n\n  const selectType = (type, e) => {\n    const checked = e.target.checked; //case cocher/decocher\n\n    let newField;\n\n    if (checked) {\n      // Si l'utilisateur coche un type, on l'ajoute à la liste des types du pokémon.\n      const newTypes = form.types.value.concat([type]); //method concat permet de fusionner 2 arr\n\n      newField = {\n        value: newTypes\n      };\n    } else {\n      // Si l'utilisateur décoche un type, on le retire de la liste des types du pokémon.\n      const newTypes = form.types.value.filter(currentType => currentType !== type); //method filter renvoi un nveau arr sans le type qui a ete decocher\n\n      newField = {\n        value: newTypes\n      };\n    }\n\n    setForm({ ...form,\n      ...{\n        types: newField\n      }\n    }); //Maj du STATE de notre form via le sread operator\n  }; //Mehod 'handleSubmit' chargé de gerer le comportement de la soumission du formulaire\n\n\n  const handleSubmit = e => {\n    e.preventDefault(); //bloquement natif afin de traiter ns meme la soumission du formulaire \n    //console.log(form); //affiche les données dans le state du formulaire ds la console du navigateur\n\n    const isFormValid = validateForm(); //On recup le resultat de la validation de nos champs\n\n    if (isFormValid) {\n      //redirection vers la page de detail d'un \"pokemon\" ssi le formulaire est valide\n      history.push(`/pokemons/${pokemon.id}`); //Enfin on redirige le user vers la page de detail d'un pokemon*/  \n\n      /*history.push(`/pokemons/${pokemon.id}`);*/\n    }\n  }; //On cree cette method dt le role verifie sera de vérifier que chaque champs respecte les regles que ns avons etabli\n\n\n  const validateForm = () => {\n    let newForm = form; // Validator name (express reg qui n'accepte que ds strings maj ou min entre 3 et 25 caracteres)\n\n    if (!/^[a-zA-Zàéè ]{3,25}$/.test(form.name.value)) {\n      //la méthode \"test\" pr tester la validité d'un champ\n      const errorMsg = 'Le nom du pokémon est requis (1-25).';\n      const newField = {\n        value: form.name.value,\n        error: errorMsg,\n        isValid: false\n      };\n      newForm = { ...newForm,\n        ...{\n          name: newField\n        }\n      };\n    } else {\n      const newField = {\n        value: form.name.value,\n        error: '',\n        isValid: true\n      };\n      newForm = { ...newForm,\n        ...{\n          name: newField\n        }\n      };\n    } // Validator hp (que des chiffres en 1 et 3 de long)\n\n\n    if (!/^[0-9]{1,3}$/.test(form.hp.value)) {\n      const errorMsg = 'Les points de vie du pokémon sont compris entre 0 et 999.';\n      const newField = {\n        value: form.hp.value,\n        error: errorMsg,\n        isValid: false\n      };\n      newForm = { ...newForm,\n        ...{\n          hp: newField\n        }\n      };\n    } else {\n      const newField = {\n        value: form.hp.value,\n        error: '',\n        isValid: true\n      };\n      newForm = { ...newForm,\n        ...{\n          hp: newField\n        }\n      };\n    } // Validator cp (que des chiffres en 1 et 2 de long)\n\n\n    if (!/^[0-9]{1,2}$/.test(form.cp.value)) {\n      const errorMsg = 'Les dégâts du pokémon sont compris entre 0 et 99';\n      const newField = {\n        value: form.cp.value,\n        error: errorMsg,\n        isValid: false\n      };\n      newForm = { ...newForm,\n        ...{\n          cp: newField\n        }\n      };\n    } else {\n      const newField = {\n        value: form.cp.value,\n        error: '',\n        isValid: true\n      };\n      newForm = { ...newForm,\n        ...{\n          cp: newField\n        }\n      };\n    } //une fois le STATE à jour, on regarde si le nouveau formulaire est valide ou non\n\n\n    setForm(newForm);\n    return newForm.name.isValid && newForm.hp.isValid && newForm.cp.isValid;\n  }; //La methode s'occupe de renvoyer un booléen à savoir si une case est vide ou non\n  //Method 'hasType'  pr verifier que ns ne verrouillons pas ds cases que le user a deja cocher, cela lui permettra de \"deselectionner\"\n\n\n  const isTypesValid = type => {\n    // Cas n°1: Le pokémon a un seul type, qui correspond au type passé en paramètre.\n    // Dans ce cas on revoie false, car l'utilisateur ne doit pas pouvoir décoché ce type (sinon le pokémon aurait 0 type, ce qui est interdit)\n    if (form.types.value.length === 1 && hasType(type)) {\n      return false;\n    } // Cas n°2: Le pokémon a au moins 3 types.\n    // Dans ce cas il faut empêcher à l'utilisateur de cocher un nouveau type, mais pas de décocher les types existants.\n\n\n    if (form.types.value.length >= 3 && !hasType(type)) {\n      return false;\n    } // Après avoir passé les deux tests ci-dessus, on renvoie 'true', \n    // c'est-à-dire que l'on autorise l'utilisateur à cocher ou décocher un nouveau type.\n\n\n    return true;\n  };\n\n  return (\n    /*#__PURE__*/\n    //Utilisation de materialize (classeName)\n    _jsxDEV(\"form\", {\n      onSubmit: e => handleSubmit(e),\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col s12 m8 offset-m2\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card hoverable\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card-image\",\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: pokemon.picture,\n                alt: pokemon.name,\n                style: {\n                  width: '250px',\n                  margin: '0 auto'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 161,\n                columnNumber: 15\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 160,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card-stacked\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"card-content\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"form-group\",\n                  children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                    htmlFor: \"name\",\n                    children: \"Nom\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 167,\n                    columnNumber: 19\n                  }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                    id: \"name\",\n                    name: \"name\",\n                    type: \"text\",\n                    className: \"form-control\",\n                    value: form.name.value,\n                    onChange: e => handleInputChange(e)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 168,\n                    columnNumber: 19\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 166,\n                  columnNumber: 17\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"form-group\",\n                  children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                    htmlFor: \"hp\",\n                    children: \"Point de vie\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 172,\n                    columnNumber: 19\n                  }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                    id: \"hp\",\n                    name: \"hp\",\n                    type: \"number\",\n                    className: \"form-control\",\n                    value: form.hp.value,\n                    onChange: e => handleInputChange(e)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 173,\n                    columnNumber: 19\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 171,\n                  columnNumber: 17\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"form-group\",\n                  children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                    htmlFor: \"cp\",\n                    children: \"D\\xE9g\\xE2ts\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 177,\n                    columnNumber: 19\n                  }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                    id: \"cp\",\n                    name: \"cp\",\n                    type: \"number\",\n                    className: \"form-control\",\n                    value: form.cp.value,\n                    onChange: e => handleInputChange(e)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 178,\n                    columnNumber: 19\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 176,\n                  columnNumber: 17\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"form-group\",\n                  children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                    children: \"Types\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 182,\n                    columnNumber: 19\n                  }, this), types.map(type => /*#__PURE__*/_jsxDEV(\"div\", {\n                    style: {\n                      marginBottom: '10px'\n                    },\n                    children: /*#__PURE__*/_jsxDEV(\"label\", {\n                      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                        id: type,\n                        type: \"checkbox\",\n                        className: \"filled-in\",\n                        value: type,\n                        disabled: !isTypesValid(type),\n                        checked: hasType(type),\n                        onChange: e => selectType(type, e)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 186,\n                        columnNumber: 25\n                      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                        children: /*#__PURE__*/_jsxDEV(\"p\", {\n                          className: formatType(type),\n                          children: type\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 191,\n                          columnNumber: 27\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 190,\n                        columnNumber: 25\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 185,\n                      columnNumber: 23\n                    }, this)\n                  }, type, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 184,\n                    columnNumber: 21\n                  }, this))]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 181,\n                  columnNumber: 17\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 164,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"card-action center\",\n                children: /*#__PURE__*/_jsxDEV(\"button\", {\n                  type: \"submit\",\n                  className: \"btn\",\n                  children: \"Valider\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 201,\n                  columnNumber: 17\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 199,\n                columnNumber: 15\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 163,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 5\n    }, this)\n  );\n};\n\n_s(PokemonForm, \"96j9K2NdiXaCR9VjjZKKjkLKkBM=\", false, function () {\n  return [useHistory];\n});\n\n_c = PokemonForm;\nexport default PokemonForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"PokemonForm\");","map":{"version":3,"sources":["/home/christophe/REACT-POKEMONS-APP-CV/src/components/pokemon-form.tsx"],"names":["React","useState","useHistory","formatType","PokemonForm","pokemon","form","setForm","name","value","isValid","hp","cp","types","history","hasType","type","includes","handleInputChange","e","fieldName","target","fieldValue","newField","selectType","checked","newTypes","concat","filter","currentType","handleSubmit","preventDefault","isFormValid","validateForm","push","id","newForm","test","errorMsg","error","isTypesValid","length","picture","width","margin","map","marginBottom"],"mappings":"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","sourcesContent":["import React, { FunctionComponent, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport Pokemon from '../models/pokemon';\nimport formatType from '../helpers/format-type';\n  \ntype Props = {\n  pokemon: Pokemon\n};\n\n//Declarer 2 nveaux types pr mieux modéliser ns formulaire:\n//Formulaire saisi ds le champ si valide ou non\ntype Field = { //modelise un champ ds notre form\n  value?: any,\n  error?: string,\n  isValid?: boolean\n};\n\n//formulaire à propremnt parler via les champs dispos\ntype Form = {\n  name: Field,\n  hp: Field,\n  cp: Field,\n  types: Field\n}\n\n//Combinaison de ces 2 types permettra de structurer le state utiliser pr notre 'form' d'edition\n//on cree un state pour modeliser les données qui vt etre gerer pr le form d'edition\n  \nconst PokemonForm: FunctionComponent<Props> = ({pokemon}) => {\n\n  const [form, setForm] = useState<Form>({ //données uniquemnt present ds le state\n    name: { value: pokemon.name, isValid: true },\n    hp: { value: pokemon.hp, isValid: true },\n    cp: { value: pokemon.cp, isValid: true },\n    types: { value: pokemon.types, isValid: true }\n  });\n\n  const history = useHistory();\n  \n  const types: string[] = [ //contain all free pokemon to display in a form\n    'Plante', 'Feu', 'Eau', 'Insecte', 'Normal', 'Electrik',\n    'Poison', 'Fée', 'Vol', 'Combat', 'Psy'\n  ];\n  \n/*Methode renvoi un simple 'boolean' permettant de savoir si le type\npassé en paramètre appartient ou non à un pokemon\nMethode JS native \"includes\" pr determiner si un type appartient\nà un type de pokemon ou non, cette methode renvoi d'elle meme un booleen\npuis application de la méthode pr cocher/decocher la case*/\n\n     const hasType = (type: string): boolean => {\n      return form.types.value.includes(type);\n    }\n\n    const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n      const fieldName: string = e.target.name; /* nm du chp  à modifier*/ \n      const fieldValue: string = e.target.value; /*Valeur saisie par le user*/ \n      const newField: Field = { [fieldName]: { value: fieldValue } }; //regroupement des nouvelles valeurs saisies\n\n    setForm({ ...form, ...newField});\n    }\n/*on modifie l'etat de notre formulaire grace à la méthode 'setForm' fournit pr le hookState\nspread operator pr fusionner 2 objets, nouvelle donnée 'newField' ecrase la précédente*/\n\n/*MAJ de notre STATE lorsque le USER va cocher/decocher la case \nlors de l'interaction avec un type de pokemon*/\n    const selectType = (type: string, e: React.ChangeEvent<HTMLInputElement>): void => {\n      const checked = e.target.checked; //case cocher/decocher\n      let newField: Field;\n\n      if(checked) {\n        // Si l'utilisateur coche un type, on l'ajoute à la liste des types du pokémon.\n        const newTypes: string[] = form.types.value.concat([type]); //method concat permet de fusionner 2 arr\n        newField = { value: newTypes };\n      } else {\n        // Si l'utilisateur décoche un type, on le retire de la liste des types du pokémon.\n        const newTypes: string[] = form.types.value.filter((currentType: string) => currentType !== type); \n        //method filter renvoi un nveau arr sans le type qui a ete decocher\n        newField = { value: newTypes };\n      }\n\n      setForm({...form, ...{ types: newField }}); //Maj du STATE de notre form via le sread operator\n    }\n\n  //Mehod 'handleSubmit' chargé de gerer le comportement de la soumission du formulaire\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault(); //bloquement natif afin de traiter ns meme la soumission du formulaire \n    //console.log(form); //affiche les données dans le state du formulaire ds la console du navigateur\n    const isFormValid = validateForm(); //On recup le resultat de la validation de nos champs\n    if(isFormValid) { //redirection vers la page de detail d'un \"pokemon\" ssi le formulaire est valide\n      history.push(`/pokemons/${pokemon.id}`); \n    //Enfin on redirige le user vers la page de detail d'un pokemon*/  \n    /*history.push(`/pokemons/${pokemon.id}`);*/\n    }\n  }\n\n  //On cree cette method dt le role verifie sera de vérifier que chaque champs respecte les regles que ns avons etabli\n  const validateForm = () => {\n    let newForm: Form = form;\n\n      // Validator name (express reg qui n'accepte que ds strings maj ou min entre 3 et 25 caracteres)\n      if(!/^[a-zA-Zàéè ]{3,25}$/.test(form.name.value)) { //la méthode \"test\" pr tester la validité d'un champ\n      const errorMsg: string = 'Le nom du pokémon est requis (1-25).';\n      const newField: Field = { value: form.name.value, error: errorMsg, isValid: false };\n      newForm = { ...newForm, ...{ name: newField } };\n    } else {\n      const newField: Field = { value: form.name.value, error: '', isValid: true };\n      newForm = { ...newForm, ...{ name: newField } };\n    }\n\n    // Validator hp (que des chiffres en 1 et 3 de long)\n    if(!/^[0-9]{1,3}$/.test(form.hp.value)) {\n      const errorMsg: string = 'Les points de vie du pokémon sont compris entre 0 et 999.';\n      const newField: Field = {value: form.hp.value, error: errorMsg, isValid: false};\n      newForm = { ...newForm, ...{ hp: newField } };\n    } else {\n      const newField: Field = { value: form.hp.value, error: '', isValid: true };\n      newForm = { ...newForm, ...{ hp: newField } };\n    }\n\n    // Validator cp (que des chiffres en 1 et 2 de long)\n    if(!/^[0-9]{1,2}$/.test(form.cp.value)) {\n      const errorMsg: string = 'Les dégâts du pokémon sont compris entre 0 et 99';\n      const newField: Field = {value: form.cp.value, error: errorMsg, isValid: false};\n      newForm = { ...newForm, ...{ cp: newField } };\n    } else {\n      const newField: Field = { value: form.cp.value, error: '', isValid: true };\n      newForm = { ...newForm, ...{ cp: newField } };\n    }\n  //une fois le STATE à jour, on regarde si le nouveau formulaire est valide ou non\n    setForm(newForm);\n    return newForm.name.isValid && newForm.hp.isValid && newForm.cp.isValid;\n  }\n\n   //La methode s'occupe de renvoyer un booléen à savoir si une case est vide ou non\n  //Method 'hasType'  pr verifier que ns ne verrouillons pas ds cases que le user a deja cocher, cela lui permettra de \"deselectionner\"\n  const isTypesValid = (type: string): boolean => {\n    // Cas n°1: Le pokémon a un seul type, qui correspond au type passé en paramètre.\n    // Dans ce cas on revoie false, car l'utilisateur ne doit pas pouvoir décoché ce type (sinon le pokémon aurait 0 type, ce qui est interdit)\n    if (form.types.value.length === 1 && hasType(type)) {\n      return false;\n    }\n    \n    // Cas n°2: Le pokémon a au moins 3 types.\n    // Dans ce cas il faut empêcher à l'utilisateur de cocher un nouveau type, mais pas de décocher les types existants.\n    if (form.types.value.length >= 3 && !hasType(type)) { \n      return false; \n    } \n    \n    // Après avoir passé les deux tests ci-dessus, on renvoie 'true', \n    // c'est-à-dire que l'on autorise l'utilisateur à cocher ou décocher un nouveau type.\n    return true;\n  }\n\n  return ( //Utilisation de materialize (classeName)\n    <form onSubmit={(e) => handleSubmit(e)}>\n      <div className=\"row\">\n        <div className=\"col s12 m8 offset-m2\">\n          <div className=\"card hoverable\"> \n            <div className=\"card-image\">\n              <img src={pokemon.picture} alt={pokemon.name} style={{width: '250px', margin: '0 auto'}}/>\n            </div>\n            <div className=\"card-stacked\">\n              <div className=\"card-content\">\n                {/* Pokemon name */}\n                <div className=\"form-group\">\n                  <label htmlFor=\"name\">Nom</label>\n                  <input id=\"name\" name=\"name\" type=\"text\" className=\"form-control\" value={form.name.value} onChange={e => handleInputChange(e)}></input>\n                </div>\n                {/* Pokemon hp */}\n                <div className=\"form-group\">\n                  <label htmlFor=\"hp\">Point de vie</label>\n                  <input id=\"hp\" name=\"hp\" type=\"number\" className=\"form-control\" value={form.hp.value} onChange={e => handleInputChange(e)}></input>\n                </div>\n                {/* Pokemon cp */}\n                <div className=\"form-group\">\n                  <label htmlFor=\"cp\">Dégâts</label>\n                  <input id=\"cp\" name=\"cp\" type=\"number\" className=\"form-control\" value={form.cp.value} onChange={e => handleInputChange(e)}></input>\n                </div>\n                {/* Pokemon types */}\n                <div className=\"form-group\">\n                  <label>Types</label>\n                  {types.map(type => (\n                    <div key={type} style={{marginBottom: '10px'}}>\n                      <label>\n                        <input id={type} type=\"checkbox\" className=\"filled-in\" value={type} disabled={!isTypesValid(type)} checked={hasType(type)} onChange={e => selectType(type, e)}></input>\n{/*On itère sr ls types de pokémon afin d'afficher une list de case à cocher, chacune associer avec un type précis\n*Ajout de l'attribut \"checked\" et \"value\" pr determiner la valeur associer à chaque case à cocher cad le type de pokemon \nonChange={e => selectType(type, e)} : selectType, on passe 2param, le type avec lequel le user interagit et le 2nd param (e) si le user a coché/décoché*/}\n                        <span>\n                          <p className={formatType(type)}>{ type }</p>\n{/*via la METHOD formaType, affichage d'une petite bulle de couleur, le rendu sera + agreable pr le user*/}\n                        </span>\n                      </label>\n                    </div>\n                  ))}\n                </div>\n              </div>\n              <div className=\"card-action center\">\n                {/* Submit button */}\n                <button type=\"submit\" className=\"btn\">Valider</button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </form>\n  );\n};\n   \nexport default PokemonForm;"]},"metadata":{},"sourceType":"module"}