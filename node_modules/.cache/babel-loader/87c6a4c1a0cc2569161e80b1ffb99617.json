{"ast":null,"code":"export default class PokemonService {\n  //ajout de la req qui permet de recup ts les pok ds la methode getPokemons()\n  // la method retourne le resultat del aMETHO fetch qui est une prommess contenant un []\n  //de pokemons d'ou le type Promise<Pokemon[]>\n  static getPokemons() {\n    return fetch('http://localhost:3001/pokemons').then(response => response.json()).catch(error => this.handleError(error)); //err eventuel de notre promess à notre handleError\n  }\n\n  static getPokemon(id) {\n    //renvoi soit une pok ou une val null (| en tp)\n    return fetch(`http://localhost:3001/pokemons/${id}`) //recupe un seul pok via son id \n    .then(response => response.json()).then(data => this.isEmpty(data) ? null : data) //METHOD isEmpty\n    .catch(error => this.handleError(error)); //err eventuel de notre promess à notre handleError\n  } //Method update pokemon permet de push ls modif°\n  //apporter sr le pokemon passer en param vrs notre API REST\n\n\n  static updatePokemon(pokemon) {\n    return fetch(`http://localhost:3001/pokemons/${pokemon.id}`, {\n      method: 'PUT',\n      //def du type de req\n      body: JSON.stringify(pokemon),\n\n      /*2eme param a la METHOD FETCH.\n      Pr Transmettr ls data du pok vrs le reseau, on encode ts ça ds une str\n      grace à la METHOD 'JSON.stringify', method JS nativ. Elle transf un {} en string \n      Preciser quelle genre de data send to API RESt, elle aura du JSON*/\n      headers: {\n        'Content-Type': 'application/json'\n      } // Entete pour preciser quelle genre de data send to API RESt, data de type 'JSON'\n\n    }).then(response => response.json()).catch(error => this.handleError(error));\n  }\n\n  static isEmpty(data) {\n    return Object.keys(data).length === 0;\n  }\n\n  static handleError(error) {\n    //lié au catch() eventuelle err de req http ds notre appli\n    console.error(error); //affiche l'err ds la console\n  }\n\n}\n/*Method static: propre à la POO en general\n(Method non rattaché aux instance de notre class\nmais à la class elle meme!)*/\n\n/*Methode traditionnelle:\nconst service = new PokemonService();on recupe notre service\nconst pokemonsPromise = service.getPokemons();on recupe la promesse\npokemonsPromise.then(pokemons => console.info(pokemons));on affiche\nMethode static : \nPokemonsService.getPokemons().then(pokemons => console.info(pokemons));*/","map":{"version":3,"sources":["/home/christophe/REACT-POKEMONS-APP-CV/src/services/pokemon-service.ts"],"names":["PokemonService","getPokemons","fetch","then","response","json","catch","error","handleError","getPokemon","id","data","isEmpty","updatePokemon","pokemon","method","body","JSON","stringify","headers","Object","keys","length","console"],"mappings":"AAEA,eAAe,MAAMA,cAAN,CAAqB;AAEpC;AACA;AACA;AACoB,SAAXC,WAAW,GAAuB;AACvC,WAAOC,KAAK,CAAC,gCAAD,CAAL,CACJC,IADI,CACCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADb,EAEJC,KAFI,CAEEC,KAAK,IAAI,KAAKC,WAAL,CAAiBD,KAAjB,CAFX,CAAP,CADuC,CAGK;AAC7C;;AAEgB,SAAVE,UAAU,CAACC,EAAD,EAAoC;AAAE;AACrD,WAAOR,KAAK,CAAE,kCAAiCQ,EAAG,EAAtC,CAAL,CAA8C;AAA9C,KACJP,IADI,CACCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADb,EAEJF,IAFI,CAECQ,IAAI,IAAI,KAAKC,OAAL,CAAaD,IAAb,IAAqB,IAArB,GAA4BA,IAFrC,EAE2C;AAF3C,KAGJL,KAHI,CAGEC,KAAK,IAAI,KAAKC,WAAL,CAAiBD,KAAjB,CAHX,CAAP,CADmD,CAIP;AAC7C,GAhBiC,CAkBjC;AACD;;;AACoB,SAAbM,aAAa,CAACC,OAAD,EAAqC;AACvD,WAAOZ,KAAK,CAAE,kCAAiCY,OAAO,CAACJ,EAAG,EAA9C,EAAiD;AAC3DK,MAAAA,MAAM,EAAE,KADmD;AAC5C;AACfC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeJ,OAAf,CAFqD;;AAE5B;AACrC;AACA;AACA;AACQK,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB,OANgD,CAOjE;;AAPiE,KAAjD,CAAL,CASNhB,IATM,CASDC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EATX,EAUNC,KAVM,CAUAC,KAAK,IAAI,KAAKC,WAAL,CAAiBD,KAAjB,CAVT,CAAP;AAWD;;AAEa,SAAPK,OAAO,CAACD,IAAD,EAAwB;AACpC,WAAOS,MAAM,CAACC,IAAP,CAAYV,IAAZ,EAAkBW,MAAlB,KAA6B,CAApC;AACD;;AAEiB,SAAXd,WAAW,CAACD,KAAD,EAAqB;AAAE;AACvCgB,IAAAA,OAAO,CAAChB,KAAR,CAAcA,KAAd,EADqC,CACf;AACvB;;AAxCiC;AA4CpC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import Pokemon from \"../models/pokemon\";\n \nexport default class PokemonService {\n\n//ajout de la req qui permet de recup ts les pok ds la methode getPokemons()\n// la method retourne le resultat del aMETHO fetch qui est une prommess contenant un []\n//de pokemons d'ou le type Promise<Pokemon[]>\n  static getPokemons(): Promise<Pokemon[]> { \n    return fetch('http://localhost:3001/pokemons')\n      .then(response => response.json())\n      .catch(error => this.handleError(error)); //err eventuel de notre promess à notre handleError\n  }\n \n  static getPokemon(id: number): Promise<Pokemon|null> { //renvoi soit une pok ou une val null (| en tp)\n    return fetch(`http://localhost:3001/pokemons/${id}`) //recupe un seul pok via son id \n      .then(response => response.json())\n      .then(data => this.isEmpty(data) ? null : data) //METHOD isEmpty\n      .catch(error => this.handleError(error)); //err eventuel de notre promess à notre handleError\n  }\n\n   //Method update pokemon permet de push ls modif°\n  //apporter sr le pokemon passer en param vrs notre API REST\n  static updatePokemon(pokemon: Pokemon): Promise<Pokemon> {\n    return fetch(`http://localhost:3001/pokemons/${pokemon.id}`, {\n      method: 'PUT', //def du type de req\n      body: JSON.stringify(pokemon), /*2eme param a la METHOD FETCH.\nPr Transmettr ls data du pok vrs le reseau, on encode ts ça ds une str\ngrace à la METHOD 'JSON.stringify', method JS nativ. Elle transf un {} en string \nPreciser quelle genre de data send to API RESt, elle aura du JSON*/\n        headers: { 'Content-Type': 'application/json'} \n// Entete pour preciser quelle genre de data send to API RESt, data de type 'JSON'\n    })   \n    .then(response => response.json())\n    .catch(error => this.handleError(error));\n  }\n \n  static isEmpty(data: Object): boolean {\n    return Object.keys(data).length === 0;\n  }\n\n  static handleError(error: Error): void { //lié au catch() eventuelle err de req http ds notre appli\n    console.error(error); //affiche l'err ds la console\n  }\n\n}\n\n/*Method static: propre à la POO en general\n(Method non rattaché aux instance de notre class\nmais à la class elle meme!)*/\n\n/*Methode traditionnelle:\nconst service = new PokemonService();on recupe notre service\nconst pokemonsPromise = service.getPokemons();on recupe la promesse\npokemonsPromise.then(pokemons => console.info(pokemons));on affiche\nMethode static : \nPokemonsService.getPokemons().then(pokemons => console.info(pokemons));*/"]},"metadata":{},"sourceType":"module"}