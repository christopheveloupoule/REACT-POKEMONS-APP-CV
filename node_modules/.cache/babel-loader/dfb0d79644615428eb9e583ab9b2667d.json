{"ast":null,"code":"export default class PokemonService {\n  //ajout de la req qui permet de recup ts les pok ds la methode getPokemons()\n  // la method retourne le resultat del aMETHO fetch qui est une prommess contenant un []\n  //de pokemons d'ou le type Promise<Pokemon[]>\n  static getPokemons() {\n    return fetch('http://localhost:3001/pokemons').then(response => response.json()).catch(error => this.handleError(error)); //err eventuel de notre promess à notre handleError\n  }\n\n  static getPokemon(id) {\n    //renvoi soit une pok ou une val null (| en tp)\n    return fetch(`http://localhost:3001/pokemons/${id}`) //recupe un seul pok via son id \n    .then(response => response.json()).then(data => this.isEmpty(data) ? null : data) //METHOD isEmpty\n    .catch(error => this.handleError(error)); //err eventuel de notre promess à notre handleError\n  } //Method update pokemon permet de push ls modif°\n  //apporter sr le pokemon passer en param vrs notre API REST\n\n\n  static updatePokemon(pokemon) {\n    return fetch(`http://localhost:3001/pokemons/${pokemon.id}`, {\n      method: 'PUT',\n      //def du type de req\n      body: JSON.stringify(pokemon),\n\n      /*2eme param a la METHOD FETCH.\n      Pr Transmettr ls data du pok vrs le reseau, on encode ts ça ds une str\n      grace à la METHOD 'JSON.stringify', method JS nativ. Elle transf un {} en string \n      Preciser quelle genre de data send to API RESt, elle aura du JSON*/\n      headers: {\n        'Content-Type': 'application/json'\n      } // Entete pour preciser quelle genre de data send to API RESt, data de type 'JSON'\n\n    }).then(response => response.json()).catch(error => this.handleError(error));\n  } //Effacer un pok\n\n\n  static deletePokemon(pokemon) {\n    //retourne un obj vide\n    return fetch(`http://localhost:3001/pokemons/${pokemon.id}`, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(response => response.json()).catch(error => this.handleError(error));\n  } //ajouter un pok\n\n\n  static addPokemon(pokemon) {\n    delete pokemon.created; //suppr la propr d'un pok\n\n    return fetch(`http://localhost:3001/pokemons`, {\n      method: 'POST',\n      body: JSON.stringify(pokemon),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(response => response.json()).catch(error => this.handleError(error));\n  } //Method search\n\n\n  static searchPokemon(term) {\n    //retourne une promess qui renvoi un arr de Pokemon\n    return fetch(`http://localhost:3001/pokemons?q=${term}`) //Method Fetch, utilisat° d'une url special qui permet de filter ls Pokemons\n    //d'apres lr nom en fct d'un terme de recherche entré pr le user\n    .then(response => response.json()).catch(error => this.handleError(error));\n  }\n\n  static isEmpty(data) {\n    return Object.keys(data).length === 0;\n  }\n\n  static handleError(error) {\n    //lié au catch() eventuelle err de req http ds notre appli\n    console.error(error); //affiche l'err ds la console\n  }\n\n}\n/*Method static: propre à la POO en general\n(Method non rattaché aux instance de notre class\nmais à la class elle meme!)*/\n\n/*Methode traditionnelle:\nconst service = new PokemonService();on recupe notre service\nconst pokemonsPromise = service.getPokemons();on recupe la promesse\npokemonsPromise.then(pokemons => console.info(pokemons));on affiche\nMethode static : \nPokemonsService.getPokemons().then(pokemons => console.info(pokemons));*/","map":{"version":3,"sources":["/home/christophe/REACT-POKEMONS-APP-CV/src/services/pokemon-service.ts"],"names":["PokemonService","getPokemons","fetch","then","response","json","catch","error","handleError","getPokemon","id","data","isEmpty","updatePokemon","pokemon","method","body","JSON","stringify","headers","deletePokemon","addPokemon","created","searchPokemon","term","Object","keys","length","console"],"mappings":"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","sourcesContent":["import Pokemon from \"../models/pokemon\";\n \nexport default class PokemonService {\n\n//ajout de la req qui permet de recup ts les pok ds la methode getPokemons()\n// la method retourne le resultat del aMETHO fetch qui est une prommess contenant un []\n//de pokemons d'ou le type Promise<Pokemon[]>\n  static getPokemons(): Promise<Pokemon[]> { \n    return fetch('http://localhost:3001/pokemons')\n      .then(response => response.json())\n      .catch(error => this.handleError(error)); //err eventuel de notre promess à notre handleError\n  }\n \n  static getPokemon(id: number): Promise<Pokemon|null> { //renvoi soit une pok ou une val null (| en tp)\n    return fetch(`http://localhost:3001/pokemons/${id}`) //recupe un seul pok via son id \n      .then(response => response.json())\n      .then(data => this.isEmpty(data) ? null : data) //METHOD isEmpty\n      .catch(error => this.handleError(error)); //err eventuel de notre promess à notre handleError\n  }\n\n   //Method update pokemon permet de push ls modif°\n  //apporter sr le pokemon passer en param vrs notre API REST\n  static updatePokemon(pokemon: Pokemon): Promise<Pokemon> {\n    return fetch(`http://localhost:3001/pokemons/${pokemon.id}`, {\n      method: 'PUT', //def du type de req\n      body: JSON.stringify(pokemon), /*2eme param a la METHOD FETCH.\nPr Transmettr ls data du pok vrs le reseau, on encode ts ça ds une str\ngrace à la METHOD 'JSON.stringify', method JS nativ. Elle transf un {} en string \nPreciser quelle genre de data send to API RESt, elle aura du JSON*/\n        headers: { 'Content-Type': 'application/json'} \n// Entete pour preciser quelle genre de data send to API RESt, data de type 'JSON'\n    })   \n    .then(response => response.json())\n    .catch(error => this.handleError(error));\n  }\n\n//Effacer un pok\n  static deletePokemon(pokemon: Pokemon): Promise<{}> { //retourne un obj vide\n    return fetch(`http://localhost:3001/pokemons/${pokemon.id}`,{\n      method: 'DELETE',\n      headers: { 'Content-Type': 'application/json'}\n    })\n    .then(response => response.json())\n    .catch(error => this.handleError(error));\n  }\n\n  //ajouter un pok\n  static addPokemon(pokemon: Pokemon): Promise<Pokemon> {\n    delete pokemon.created; //suppr la propr d'un pok\n\n    return fetch(`http://localhost:3001/pokemons`, {\n      method: 'POST',\n      body: JSON.stringify(pokemon),\n      headers: { 'Content-Type': 'application/json'}\n    })\n    .then(response => response.json())\n    .catch(error => this.handleError(error));\n    }\n  \n  //Method search\n  static searchPokemon(term: string): Promise<Pokemon[]> { //retourne une promess qui renvoi un arr de Pokemon\n    return fetch(`http://localhost:3001/pokemons?q=${term}`) //Method Fetch, utilisat° d'une url special qui permet de filter ls Pokemons\n    //d'apres lr nom en fct d'un terme de recherche entré pr le user\n    .then(response => response.json())\n    .catch(error => this.handleError(error));\n  }\n\n  static isEmpty(data: Object): boolean {\n    return Object.keys(data).length === 0;\n  }\n\n  static handleError(error: Error): void { //lié au catch() eventuelle err de req http ds notre appli\n    console.error(error); //affiche l'err ds la console\n  }\n\n}\n\n/*Method static: propre à la POO en general\n(Method non rattaché aux instance de notre class\nmais à la class elle meme!)*/\n\n/*Methode traditionnelle:\nconst service = new PokemonService();on recupe notre service\nconst pokemonsPromise = service.getPokemons();on recupe la promesse\npokemonsPromise.then(pokemons => console.info(pokemons));on affiche\nMethode static : \nPokemonsService.getPokemons().then(pokemons => console.info(pokemons));*/"]},"metadata":{},"sourceType":"module"}