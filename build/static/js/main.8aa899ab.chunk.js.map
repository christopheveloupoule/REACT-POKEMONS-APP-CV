{"version":3,"sources":["helpers/format-date.ts","helpers/format-type.ts","components/pokemon-card.tsx","services/pokemon-service.ts","components/pokemon-search.tsx","pages/pokemon-list.tsx","components/loader.tsx","pages/pokemon-detail.tsx","pages/page-not-found.tsx","components/pokemon-form.tsx","pages/pokemon-edit.tsx","models/pokemon.ts","pages/pokemon-add.tsx","services/authentication-service.ts","pages/login.tsx","PrivateRoute.tsx","App.tsx","index.tsx"],"names":["formatDate","date","Date","getDate","getMonth","getFullYear","formatType","type","color","PokemonCard","pokemon","borderColor","useState","setColor","history","useHistory","className","onMouseEnter","onMouseLeave","onClick","id","push","style","src","picture","alt","name","created","types","map","PokemonService","fetch","then","response","json","catch","error","handleError","data","isEmpty","method","body","JSON","stringify","headers","term","Object","keys","length","console","PokemonSearch","setTerm","pokemons","setPokemons","placeholder","value","onChange","e","target","searchPokemon","handleInputChange","to","PokemonList","useEffect","getPokemons","position","bottom","right","Loader","PokemonsDetail","match","setPokemon","getPokemon","params","width","margin","hp","cp","PageNotFound","PokemonForm","isEditForm","isValid","form","setForm","hasType","includes","fieldName","fieldValue","newField","isAddForm","isTypesValid","handleSubmit","preventDefault","newForm","startsWith","endsWith","test","validateForm","updatePokemon","addPokemon","onSubmit","deletePokemon","htmlFor","marginBottom","disabled","checked","concat","filter","currentType","selectType","PokemonEdit","Pokemon","this","PokemonAdd","getTime","AuthenticationService","username","password","isAuthenticated","Promise","resolve","setTimeout","Login","message","setMessage","login","PrivateRoute","Component","component","rest","render","props","pathname","App","exact","path","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.8aa899ab.chunk.js","sourcesContent":["const formatDate = (date: Date = new Date()): string => { //on ajoute une date par def avc \"new Date\" comme param de fct°\n    return `${date.getDate()}/${date.getMonth()+1}/${date.getFullYear()}`;\n}\n \nexport default formatDate;","//METHOD FORMAT TYPE:\n\nconst formatType = (type: string): string => {\n    let color: string;\n\n    switch (type) {\n    case 'Feu': \n        color = 'red lighten-1'; \n        break; \n    case 'Eau': \n        color = 'blue lighten-1'; \n        break; \n    case 'Plante': \n        color = 'green lighten-1'; \n        break; \n    case 'Insecte': \n        color = 'brown lighten-1'; \n        break; \n    case 'Normal': \n        color = 'grey lighten-3'; \n        break; \n    case 'Vol': \n        color = 'blue lighten-3'; \n        break; \n    case 'Poison': \n        color = 'deep-purple accent-1'; \n        break; \n    case 'Fée': \n        color = 'pink lighten-4'; \n        break; \n    case 'Psy': \n        color = 'deep-purple darken-2'; \n        break; \n    case 'Electrik': \n        color = 'lime accent-1'; \n        break; \n    case 'Combat': \n        color = 'deep-orange'; \n        break; \n    default: \n        color = 'grey'; \n        break; \n    }\n\n    return `chip ${color}`; //def un petit bloc(combinaison) tjs avc MATERIALIZE\n}\n\nexport default formatType;","import React, { FunctionComponent, useState } from 'react';\nimport Pokemon from '../models/pokemon';\nimport './pokemon-card.css';\nimport formatDate from '../helpers/format-date';\nimport formatType from '../helpers/format-type';\nimport { useHistory } from 'react-router-dom';\n\ntype Props = { //On def un nouveau type pr typescript\n    pokemon: Pokemon\n    borderColor?: string // syntax propre à TS, variable is faculatif\n  };\n  \nconst PokemonCard: FunctionComponent<Props> = ({pokemon, borderColor = '#009688'}) => {\n    const [color, setColor]= useState<string>(); //couleur crte ds le State 'color'\n    const history = useHistory(); /*on recupere un {} representant l'history du navigateur\n    depuis le hook que ns venons d'importer*/\n\n    const showBorder = () => {\n        setColor(borderColor); // valeur initial de la prop save ds borderColor\n    }\n  \n    const hideBorder = () => {\n      setColor('#f5f5f5'); // we put border in grey color\n    }\n\n    /*const formatDate = (date: Date= new Date()): string => { //on ajoute une date par def avc \"new Date\" comme fct°\n        return `${date.getDate()}/${date.getMonth()+1}/${date.getFullYear()}`;\n    }*/\n\n    const goToPokemon = (id: number) => { //nvelle method de gestionnaire d'event\n      history.push(`/pokemons/${id}`); //METHOD push et en param, chemin vers lequel on souhaite se rendre\n    }\n\n    return (\n        <div className=\"col s6 m4\" onMouseEnter={showBorder} onMouseLeave={hideBorder} onClick={() => goToPokemon(pokemon.id)}>\n          <div className=\"card horizontal\" style={{ borderColor: color }}>\n            <div className=\"card-image\"> \n              <img src={pokemon.picture} alt={pokemon.name}/>\n            </div>\n            <div className=\"card-stacked\">\n              <div className=\"card-content\">\n                <p>{pokemon.name}</p>\n                <p><small>{formatDate(pokemon.created)}</small></p>\n                {/*<p><small>{pokemon.created.toString()}</small></p>*/}\n                {pokemon.types.map(type => (\n                    <span key={type} className={formatType(type)}>{type}</span>\n                ))}\n              </div>\n            </div>\n          </div> \n        </div>\n      );\n    }\n  \nexport default PokemonCard;","import Pokemon from \"../models/pokemon\";\n \nexport default class PokemonService {\n\n//ajout de la req qui permet de recup ts les pok ds la methode getPokemons()\n// la method retourne le resultat del aMETHO fetch qui est une prommess contenant un []\n//de pokemons d'ou le type Promise<Pokemon[]>\n  static getPokemons(): Promise<Pokemon[]> { \n    return fetch('http://localhost:3001/pokemons')\n      .then(response => response.json())\n      .catch(error => this.handleError(error)); //err eventuel de notre promess à notre handleError\n  }\n \n  static getPokemon(id: number): Promise<Pokemon|null> { //renvoi soit une pok ou une val null (| en tp)\n    return fetch(`http://localhost:3001/pokemons/${id}`) //recupe un seul pok via son id \n      .then(response => response.json())\n      .then(data => this.isEmpty(data) ? null : data) //METHOD isEmpty\n      .catch(error => this.handleError(error)); //err eventuel de notre promess à notre handleError\n  }\n\n   //Method update pokemon permet de push ls modif°\n  //apporter sr le pokemon passer en param vrs notre API REST\n  static updatePokemon(pokemon: Pokemon): Promise<Pokemon> {\n    return fetch(`http://localhost:3001/pokemons/${pokemon.id}`, {\n      method: 'PUT', //def du type de req\n      body: JSON.stringify(pokemon), /*2eme param a la METHOD FETCH.\nPr Transmettr ls data du pok vrs le reseau, on encode ts ça ds une str\ngrace à la METHOD 'JSON.stringify', method JS nativ. Elle transf un {} en string \nPreciser quelle genre de data send to API RESt, elle aura du JSON*/\n      headers: { 'Content-Type': 'application/json'} \n// Entete pour preciser quelle genre de data send to API RESt, data de type 'JSON'\n    })   \n    .then(response => response.json())\n    .catch(error => this.handleError(error));\n  }\n\n//Effacer un pok\n  static deletePokemon(pokemon: Pokemon): Promise<{}> { //retourne un obj vide\n    return fetch(`http://localhost:3001/pokemons/${pokemon.id}`,{\n      method: 'DELETE',\n      headers: { 'Content-Type': 'application/json'}\n    })\n    .then(response => response.json())\n    .catch(error => this.handleError(error));\n  }\n\n  //ajouter un pok\n  static addPokemon(pokemon: Pokemon): Promise<Pokemon> {\n    delete pokemon.created; //suppr la propr d'un pok\n\n    return fetch(`http://localhost:3001/pokemons`, {\n      method: 'POST',\n      body: JSON.stringify(pokemon),\n      headers: { 'Content-Type': 'application/json'}\n    })\n    .then(response => response.json())\n    .catch(error => this.handleError(error));\n    }\n  \n  //Method search\n  static searchPokemon(term: string): Promise<Pokemon[]> { //retourne une promess qui renvoi un arr de Pokemon\n    return fetch(`http://localhost:3001/pokemons?q=${term}`) //Method Fetch, utilisat° d'une url special qui permet de filter ls Pokemons\n    //d'apres lr nom en fct d'un terme de recherche entré pr le user\n    .then(response => response.json())\n    .catch(error => this.handleError(error));\n  }\n\n  static isEmpty(data: Object): boolean {\n    return Object.keys(data).length === 0;\n  }\n\n  static handleError(error: Error): void { //lié au catch() eventuelle err de req http ds notre appli\n    console.error(error); //affiche l'err ds la console\n  }\n\n}\n\n/*Method static: propre à la POO en general\n(Method non rattaché aux instance de notre class\nmais à la class elle meme!)*/\n\n/*Methode traditionnelle:\nconst service = new PokemonService();on recupe notre service\nconst pokemonsPromise = service.getPokemons();on recupe la promesse\npokemonsPromise.then(pokemons => console.info(pokemons));on affiche\nMethode static : \nPokemonsService.getPokemons().then(pokemons => console.info(pokemons));*/","import React, { FunctionComponent, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport Pokemon from '../models/pokemon';\nimport PokemonService from '../services/pokemon-service';\n\nconst PokemonSearch: FunctionComponent = () => {\n \n//on def 2 états pr ce composant\n  const [term, setTerm] = useState<string>(''); //save le term de recherch pr le user\n  const [pokemons, setPokemons] = useState<Pokemon[]>([]); //stock ls pokemons corresp. aux termes de recherches\n\n//On def ls METHOD propr aux formulaire ds REACT lorsque le user saisi une valeur\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    const term = e.target.value;\n    setTerm(term); //MAJ le state de notre composant avec la nvelle value du \"term\" demander pr le user\n\n//On verif que le \"term\" demandé pr le user fait au moins 2 caract de lg \n    if(term.length <= 1) {\n      setPokemons([]); //si qu'un seul caract aucun affichage...\n      return;\n    }\n\n//On appelle la METHOD searchPokemon en lui passant en param le terme de recherche du user\n//et on remplit le STATE ds results avc les Pokemon demandés\n    PokemonService.searchPokemon(term).then(pokemons => setPokemons(pokemons));\n  }\n \n  return (\n    <div className=\"row\"> \n    <div className=\"col s12 m6 offset-m3\"> \n      <div className=\"card\"> \n      <div className=\"card-content\"> \n        <div className=\"input-field\"> \n        <input type=\"text\" placeholder=\"Rechercher un pokémon\" value={term} onChange={e => handleInputChange(e)} /> \n        </div> \n        <div className='collection'>\n        {pokemons.map((pokemon) => (\n          <Link key={pokemon.id} to={`/pokemons/${pokemon.id}`} className=\"collection-item\">\n            {pokemon.name}\n          </Link> /*On list ls Pokemons recuperer depuis le STATE qui corresp au result de la recherche,\n          si le user click sr un des pokemon de la liste ds results, on le redirige vers la fiche detaillée de ce Pokemon*/\n        ))}\n        </div> \n      </div> \n      </div> \n    </div> \n    </div>\n  );\n}\n \nexport default PokemonSearch;","import React, { FunctionComponent, useState, useEffect } from 'react';\nimport Pokemon from '../models/pokemon';\n//import POKEMONS from '../models/mock-pokemon';\nimport PokemonCard from '../components/pokemon-card';\nimport PokemonService from '../services/pokemon-service';\nimport { Link } from 'react-router-dom';\nimport PokemonSearch from '../components/pokemon-search';\n\nconst PokemonList: FunctionComponent = () => {\n  const [pokemons, setPokemons] = useState<Pokemon[]>([]);\n  //we Initialize our state component with an empty array per default\n  \n  useEffect(() => {\n      //setPokemons(POKEMONS); on remplace cette cst en DUR pr notre APIREST via FETCH\n      //on recupe des pokemons depuis notre APIREST et on les place dans le STATE de notre composant\n   \n      /*fetch('http://localhost:3001/pokemons') //requete de type GET en lui passant une URL\n    .then(response => response.json()) //on recupe un {}response de la part de notre méthode FETCH & methode json sur cet reponse pr extraire les datas\n    .then((pokemons) => { //Met à dispo ns pokemons ds le STATE de ns composants\n      setPokemons(pokemons)   \n    });*/\n    PokemonService.getPokemons().then(pokemons => setPokemons(pokemons));\n//utilisat° de notre service pr recup la list des pokemons depuis l'API REST\n//puis on met a jour le STATE de notre composant avc les pokemon fraichemnt reçus\n  }, []);\n  \n  return (\n    <div>\n      <h1 className=\"center\">Pokédex</h1>\n      <div className=\"container\"> \n        <div className=\"row\"> \n          <PokemonSearch /> {/*Ajout recherche de Pokemon et import...*/}\n          {pokemons.map(pokemon => (\n            <PokemonCard key={pokemon.id} pokemon={pokemon} />\n          ))}\n        </div>\n      </div>\n      <Link className=\"btn-floating btn-large waves-effect waves-light red z-depth-3\"\n        style={{position: 'fixed', bottom: '25px', right: '25px'}}\n        to=\"/pokemon/add\">\n          <i className=\"material-icons\">add</i>\n      </Link>\n    </div> \n  );\n}\n  \nexport default PokemonList;","import React, { FunctionComponent } from 'react';\n\nconst Loader: FunctionComponent = () => {\n \n  return (\n    <div className=\"preloader-wrapper big active\"> \n      <div className=\"spinner-layer spinner-blue\"> \n        <div className=\"circle-clipper left\"> \n          <div className=\"circle\"></div> \n        </div>\n        <div className=\"gap-patch\"> \n          <div className=\"circle\"></div> \n        </div><div className=\"circle-clipper right\"> \n          <div className=\"circle\"></div> \n        </div>\n      </div> \n   </div> \n  );\n}\n \nexport default Loader;\n\n//le composant n'a pas de logique propre, juste affichage d'une circulaire lors du load","import React, { FunctionComponent, useState, useEffect } from 'react';\nimport { RouteComponentProps, Link } from 'react-router-dom';\nimport Pokemon from '../models/pokemon'; //representat° model for 'type' our variables\n//import POKEMONS from '../models/mock-pokemon'; //Add cst 'Pokemon' contains data of 'Pokemon'\nimport formatDate from '../helpers/format-date';\nimport formatType from '../helpers/format-type';\nimport PokemonService from '../services/pokemon-service';\nimport Loader from '../components/loader';\n\n/*On def un type nommé params pr recup l'ID que ns allons \nrecup depuis l'URL, cet id est envoyé sous la forme d'une \nchaine de caractère par le router de react */\ntype Params = { id: string };\n\n/*on utilise l'importat° RouteComponentProps précédente pr typer \nle parmètre reçu depuis le routeur */ \nconst PokemonsDetail: FunctionComponent<RouteComponentProps<Params>> = ({ match }) => {\n\n/*On def un state pr save le pokemon à afficher\npar def, state a la valeur null\n<Pokemon|null soit valeur de Pokemon soit null...*/\n    \n  const [pokemon, setPokemon] = useState<Pokemon|null>(null);\n  \n/*Hook d'effet dans lequel une boucle permet de retrouver le pokemon\navc l'id passer en paramètre\nsi paramètre url = id d'un pokemon de la liste, on l'affect \nau state du composant via la méthode setPokemon,\nsi aucun pokemon trouver de cette façon alors pokemon = 0*/\n\n  useEffect(() => {\n    /*POKEMONS.forEach(pokemon => {\n      if (match.params.id === pokemon.id.toString()) {\n        setPokemon(pokemon);\n      }\n    })*/\n    \n    /*fetch(`http://localhost:3001/pokemons/${match.params.id }`) //requete de type GET en lui passant une URL\n    .then(response => response.json()) //on recupe un {}response de la part de notre méthode FETCH & methode json sur cet reponse pr extraire les datas\n    .then(pokemon => { //MAJ du pokemon ds ns composants\n      if(pokemon.id) setPokemon(pokemon); //Verification si le user request un pokemon avec un id qui existe, \n    }) //si ok on place le pokemon ds le STATE de notre composant sinn renvoi un {} vide*/\n\n    PokemonService.getPokemon(+match.params.id).then(pokemon => setPokemon(pokemon));\n  /* +: astuce de syntaxe de TP qui permet de convertir une string en un nbre,le routeur \n  de React ns transmet l'ID d'un pokemon ss forme de string & la method getPokemon \n  de notre service attend un nbre en paramètre\n  Method getPokemon de notre service pr recupèrer un Pokemon unique\n   */\n\n  }, [match.params.id]);\n    \n  return (\n    <div>\n      { pokemon ? ( //opérateur ternaire qui affiche un pokemon sinon rien à afficher...\n        <div className=\"row\">\n          <div className=\"col s12 m8 offset-m2\"> \n            <h2 className=\"header center\">{ pokemon.name }</h2>\n            <div className=\"card hoverable\"> \n              <div className=\"card-image\">\n                <img src={pokemon.picture} alt={pokemon.name} style={{width: '250px', margin: '0 auto'}}/>\n                <Link to={`/pokemons/edit/${pokemon.id}`} className=\"btn-floating halfway-fab waves-effect waves-light\">\n                  <i className=\"material-icons\">edit</i>\n                </Link> {/*Ajout du bouton d'edition (avc qqs classes de materialise pr positionner le bouton correctement)*/}\n              </div>\n              <div className=\"card-stacked\">\n                <div className=\"card-content\">\n                  <table className=\"bordered striped\">\n                    <tbody>\n                      <tr> \n                        <td>Nom</td> \n                        <td><strong>{ pokemon.name }</strong></td> \n                      </tr>\n                      <tr> \n                        <td>Points de vie</td> \n                        <td><strong>{ pokemon.hp }</strong></td> \n                      </tr> \n                      <tr> \n                        <td>Dégâts</td> \n                        <td><strong>{ pokemon.cp }</strong></td> \n                      </tr> \n                      <tr> \n                        <td>Types</td> \n                        <td>\n                          {pokemon.types.map(type => (\n                           <span key={type} className={formatType(type)}>{type}</span> //affichage type pokemon\n                          ))}</td> \n                      </tr> \n                      <tr> \n                        <td>Date de création</td> \n                        <td>{formatDate(pokemon.created)}</td>  \n                      </tr>\n                    </tbody>\n                  </table>\n                </div>\n                <div className=\"card-action\">\n                  <Link to=\"/\">Retour</Link>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      ) : ( //sinon aucun pokemon a afficher\n        <h4 className=\"center\"><Loader/>{/*Aucun pokémon à afficher!*/}</h4>\n      )}\n    </div>\n  );\n}\n  \nexport default PokemonsDetail;","import React, { FunctionComponent } from 'react';\nimport { Link } from 'react-router-dom';\n\nconst PageNotFound: FunctionComponent = () => {\n\n  return (\n    <div className=\"center\">\n      <img src=\"http://assets.pokemon.com/assets/cms2/img/pokedex/full/035.png\" alt=\"Page non trouvée\"/>\n      <h1>Hey, cette page n'existe pas !</h1> \n      <Link to=\"/\" className=\"waves-effect waves-teal btn-flat\">\n        Retourner à l'accueil\n      </Link>\n    </div>\n  );\n}\n\nexport default PageNotFound;","import React, { FunctionComponent, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport Pokemon from '../models/pokemon';\nimport formatType from '../helpers/format-type';\nimport PokemonService from '../services/pokemon-service';\n  \ntype Props = {\n  pokemon: Pokemon,\n  isEditForm: boolean\n};\n\n//Declarer 2 nveaux types pr mieux modéliser ns formulaire:\n//Formulaire saisi ds le champ si valide ou non\ntype Field = { //modelise un champ ds notre form\n  value?: any,\n  error?: string,\n  isValid?: boolean\n};\n\n//formulaire à propremnt parler via les champs dispos\ntype Form = {\n  picture: Field,\n  name: Field,\n  hp: Field,\n  cp: Field,\n  types: Field\n}\n\n//Combinaison de ces 2 types permettra de structurer le state utiliser pr notre 'form' d'edition\n//on cree un state pour modeliser les données qui vt etre gerer pr le form d'edition\n  \nconst PokemonForm: FunctionComponent<Props> = ({pokemon, isEditForm}) => {\n\n  const [form, setForm] = useState<Form>({ //données uniquemnt present ds le state\n    picture: { value: pokemon.picture },\n    name: { value: pokemon.name, isValid: true },\n    hp: { value: pokemon.hp, isValid: true },\n    cp: { value: pokemon.cp, isValid: true },\n    types: { value: pokemon.types, isValid: true }\n  });\n\n  const history = useHistory();\n  \n  const types: string[] = [ //contain all free pokemon to display in a form\n    'Plante', 'Feu', 'Eau', 'Insecte', 'Normal', 'Electrik',\n    'Poison', 'Fée', 'Vol', 'Combat', 'Psy'\n  ];\n  \n/*Methode renvoi un simple 'boolean' permettant de savoir si le type\npassé en paramètre appartient ou non à un pokemon\nMethode JS native \"includes\" pr determiner si un type appartient\nà un type de pokemon ou non, cette methode renvoi d'elle meme un booleen\npuis application de la méthode pr cocher/decocher la case*/\n\n    const hasType = (type: string): boolean => {\n      return form.types.value.includes(type);\n    }\n\n/*MAJ de notre STATE lorsque le USER va cocher/decocher la case \nlors de l'interaction avec un type de pokemon*/\n    const selectType = (type: string, e: React.ChangeEvent<HTMLInputElement>): void => {\n      const checked = e.target.checked; //case cocher/decocher\n      let newField: Field;\n\n      if(checked) {\n        // Si l'utilisateur coche un type, on l'ajoute à la liste des types du pokémon.\n        const newTypes: string[] = form.types.value.concat([type]); //method concat permet de fusionner 2 arr\n        newField = { value: newTypes };\n      } else {\n        // Si l'utilisateur décoche un type, on le retire de la liste des types du pokémon.\n        const newTypes: string[] = form.types.value.filter((currentType: string) => currentType !== type); \n        //method filter renvoi un nveau arr sans le type qui a ete decocher\n        newField = { value: newTypes };\n      }\n\n      setForm({...form, ...{ types: newField }}); //Maj du STATE de notre form via le sread operator\n    }\n\n    const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n      const fieldName: string = e.target.name; /* nm du chp  à modifier*/ \n      const fieldValue: string = e.target.value; /*Valeur saisie par le user*/ \n      const newField: Field = { [fieldName]: { value: fieldValue } }; //regroupement des nouvelles valeurs saisies\n\n    setForm({ ...form, ...newField});\n    }\n/*on modifie l'etat de notre formulaire grace à la méthode 'setForm' fournit pr le hookState\nspread operator pr fusionner 2 objets, nouvelle donnée 'newField' ecrase la précédente*/\n\n  const isAddForm = () => {\n    return !isEditForm;\n  }\n\n  //On cree cette method dt le role verifie sera de vérifier que chaque champs respecte les regles que ns avons etabli\n  const validateForm = () => {\n    let newForm: Form = form;\n\n    //Validator url\n\n    if(isAddForm()) { //regle de validation \n      const start = \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/\"; //\n      const end = \".png\"; //url saisit par le user se termine par png\n\n      //ES6, utilise les method startWith EndWith \n      //permet de tester qu'un caractere commence pr 1certain prefix & se termine pr un certain suffix\n      if(!form.picture.value.startsWith(start) || !form.picture.value.endsWith(end)) {\n        const errorMsg: string = 'L\\'url n\\'est pas valide.';\n        const newField: Field = { value: form.picture.value, error: errorMsg, isValid: false };\n        newForm = { ...newForm, ...{ picture: newField } };\n      } else {\n        const newField: Field = { value: form.picture.value, error: '', isValid: true };\n        newForm = { ...newForm, ...{ picture: newField } };\n      }\n\n    }\n\n      // Validator name (express reg qui n'accepte que ds strings maj ou min entre 3 et 25 caracteres)\n    if(!/^[a-zA-Zàéè ]{3,25}$/.test(form.name.value)) { //la méthode \"test\" pr tester la validité d'un champ\n      const errorMsg: string = 'Le nom du pokémon est requis (1-25).';\n      const newField: Field = { value: form.name.value, error: errorMsg, isValid: false };\n      newForm = { ...newForm, ...{ name: newField } };\n    } else {\n      const newField: Field = { value: form.name.value, error: '', isValid: true };\n      newForm = { ...newForm, ...{ name: newField } };\n    }\n\n    // Validator hp (que des chiffres en 1 et 3 de long)\n    if(!/^[0-9]{1,3}$/.test(form.hp.value)) {\n      const errorMsg: string = 'Les points de vie du pokémon sont compris entre 0 et 999.';\n      const newField: Field = {value: form.hp.value, error: errorMsg, isValid: false};\n      newForm = { ...newForm, ...{ hp: newField } };\n    } else {\n      const newField: Field = { value: form.hp.value, error: '', isValid: true };\n      newForm = { ...newForm, ...{ hp: newField } };\n    }\n\n    // Validator cp (que des chiffres en 1 et 2 de long)\n    if(!/^[0-9]{1,2}$/.test(form.cp.value)) {\n      const errorMsg: string = 'Les dégâts du pokémon sont compris entre 0 et 99';\n      const newField: Field = {value: form.cp.value, error: errorMsg, isValid: false};\n      newForm = { ...newForm, ...{ cp: newField } };\n    } else {\n      const newField: Field = { value: form.cp.value, error: '', isValid: true };\n      newForm = { ...newForm, ...{ cp: newField } };\n    }\n  //une fois le STATE à jour, on regarde si le nouveau formulaire est valide ou non\n    setForm(newForm);\n    return newForm.name.isValid && newForm.hp.isValid && newForm.cp.isValid;\n  }\n\n   //La methode s'occupe de renvoyer un booléen à savoir si une case est vide ou non\n  //Method 'hasType'  pr verifier que ns ne verrouillons pas ds cases que le user a deja cocher, cela lui permettra de \"deselectionner\"\n  const isTypesValid = (type: string): boolean => {\n    // Cas n°1: Le pokémon a un seul type, qui correspond au type passé en paramètre.\n    // Dans ce cas on revoie false, car l'utilisateur ne doit pas pouvoir décoché ce type (sinon le pokémon aurait 0 type, ce qui est interdit)\n    if (form.types.value.length === 1 && hasType(type)) {\n      return false;\n    }\n    \n    // Cas n°2: Le pokémon a au moins 3 types.\n    // Dans ce cas il faut empêcher à l'utilisateur de cocher un nouveau type, mais pas de décocher les types existants.\n    if (form.types.value.length >= 3 && !hasType(type)) { \n      return false; \n    } \n    \n    // Après avoir passé les deux tests ci-dessus, on renvoie 'true', \n    // c'est-à-dire que l'on autorise l'utilisateur à cocher ou décocher un nouveau type.\n    return true;\n  }\n\n  //Mehod 'handleSubmit' chargé de gerer le comportement de la soumission du formulaire\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault(); //bloquement natif afin de traiter ns meme la soumission du formulaire \n    //console.log(form); //affiche les données dans le state du formulaire ds la console du navigateur\n    const isFormValid = validateForm(); //On recup le resultat de la validation de nos champs\n    if(isFormValid) { //redirection vers la page de detail d'un \"pokemon\" ssi le formulaire est valide\n      pokemon.picture = form.picture.value;\n      pokemon.name = form.name.value;\n      pokemon.hp = form.hp.value;\n      pokemon.cp = form.cp.value;\n      pokemon.types = form.types.value;\n      PokemonService.updatePokemon(pokemon).then(() => history.push(`/pokemons/${pokemon.id}`)); \n      isEditForm ? updatePokemon() : addPokemon(); //edition ou ajout d'un nvx pokemon\n    \n      //Enfin on redirige le user vers la page de detail d'un pokemon*/  \n    /*history.push(`/pokemons/${pokemon.id}`);*/\n    }\n  }\n\n  const addPokemon = () => {\n    PokemonService.addPokemon(pokemon).then(() => history.push(`/pokemons`));\n  }\n  \n  const updatePokemon = () => {\n    PokemonService.updatePokemon(pokemon).then(() => history.push(`/pokemons/${pokemon.id}`));\n  }\n\n  //On implémente une method DeletePokemon\n  const deletePokemon = () => {\n    PokemonService.deletePokemon(pokemon).then(() => history.push(`/pokemons`));\n  }\n\n  return ( //Utilisation de materialize (classeName)\n    <form onSubmit={(e) => handleSubmit(e)}>\n      <div className=\"row\">\n        <div className=\"col s12 m8 offset-m2\">\n          <div className=\"card hoverable\">\n            {isEditForm && ( \n            <div className=\"card-image\">\n              <img src={pokemon.picture} alt={pokemon.name} style={{width: '250px', margin: '0 auto'}}/>\n              <span className=\"btn-floating halfway-fab waves-effect waves-light\">\n                <i onClick={deletePokemon} className=\"material-icons\">delete</i>\n              </span>{/*Suppress° du pokemon depuis l'APIREST*/}\n            </div>\n            )}\n            <div className=\"card-stacked\">\n              <div className=\"card-content\">\n                {/* Pokemon picture */}\n                {isAddForm() && (\n                <div className=\"form-group\"> \n                  <label htmlFor=\"name\">Image</label>\n                  <input id=\"picture\" name=\"picture\" type=\"text\" className=\"form-control\" value={form.picture.value} onChange={e => handleInputChange(e)}></input>\n                  {/*Parfait echange entre value&onChange(state et formulaire)*/}\n                  {/* error */}\n                  {form.picture.error &&\n                  <div className=\"card-panel red accent-1\"> \n                   {form.picture.error} \n                  </div>} \n                </div>\n                )}\n                {/* Pokemon name */}\n                <div className=\"form-group\">\n                  <label htmlFor=\"name\">Nom</label>\n                  <input id=\"name\" name=\"name\" type=\"text\" className=\"form-control\" value={form.name.value} onChange={e => handleInputChange(e)}></input>\n                  {form.name.error &&\n                  <div className=\"card-panel red accent-1\"> \n                   {form.name.error}\n                  </div>\n                  }\n                </div>\n                {/* Pokemon hp */}\n                <div className=\"form-group\">\n                  <label htmlFor=\"hp\">Point de vie</label>\n                  <input id=\"hp\" name=\"hp\" type=\"number\" className=\"form-control\" value={form.hp.value} onChange={e => handleInputChange(e)}></input>\n                  {form.hp.error &&\n                  <div className=\"card-panel red accent-1\"> \n                   {form.hp.error}\n                  </div>\n                  }\n                </div>\n                {/* Pokemon cp */}\n                <div className=\"form-group\">\n                  <label htmlFor=\"cp\">Dégâts</label>\n                  <input id=\"cp\" name=\"cp\" type=\"number\" className=\"form-control\" value={form.cp.value} onChange={e => handleInputChange(e)}></input>\n                  {form.cp.error &&\n                  <div className=\"card-panel red accent-1\"> \n                   {form.cp.error}\n                  </div>\n                  }\n                </div>\n                {/* Pokemon types */}\n                <div className=\"form-group\">\n                  <label>Types</label>\n                  {types.map(type => (\n                    <div key={type} style={{marginBottom: '10px'}}>\n                      <label>\n                        <input id={type} type=\"checkbox\" className=\"filled-in\" value={type} disabled={!isTypesValid(type)} checked={hasType(type)} onChange={e => selectType(type, e)}></input>\n{/*On itère sr ls types de pokémon afin d'afficher une list de case à cocher, chacune associer avec un type précis\n*Ajout de l'attribut \"checked\" et \"value\" pr determiner la valeur associer à chaque case à cocher cad le type de pokemon \nonChange={e => selectType(type, e)} : selectType, on passe 2param, le type avec lequel le user interagit et le 2nd param (e) si le user a coché/décoché*/}\n                        <span>\n                          <p className={formatType(type)}>{ type }</p>\n{/*via la METHOD formaType, affichage d'une petite bulle de couleur, le rendu sera + agreable pr le user*/}\n                        </span>\n                      </label>\n                    </div>\n                  ))}\n                </div>\n              </div>\n              <div className=\"card-action center\">\n                {/* Submit button */}\n                <button type=\"submit\" className=\"btn\">Valider</button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </form>\n  );\n};\n   \nexport default PokemonForm;","import React, { FunctionComponent, useState, useEffect } from 'react';\nimport { RouteComponentProps } from 'react-router-dom';\nimport PokemonForm from '../components/pokemon-form';\nimport Pokemon from '../models/pokemon';\n//import POKEMONS from '../models/mock-pokemon';\nimport PokemonService from '../services/pokemon-service';\nimport Loader from '../components/loader';\n \ntype Params = { id: string };\n/*ns declarons un \"type\" pr une \"propriete\" nommer id qui correspond\nà l'id du pokemon à éditer. Ns passons cette propriete au composant*/\nconst PokemonEdit: FunctionComponent<RouteComponentProps<Params>> = ({ match }) => {\n    \n  const [pokemon, setPokemon] = useState<Pokemon|null>(null);\n \n  /*Ns chargeons le bon pokemon ds notre STATE, celui l' id passé depuis l'URL*/\n  useEffect(() => {\n    /*Realatif a la cst POKEMONS (mock-pokemon.ts)\n    POKEMONS.forEach(pokemon => {\n      if (match.params.id === pokemon.id.toString()) {\n        setPokemon(pokemon); //Verification si le user request un pokemon avec un id qui existe,\n      } //si ok on place le pokemon ds le STATE de notre composant sinn on ne fait rien dc {}vide\n    })*/\n    //on recupe des pokemons depuis notre APIREST et on les place dans le STATE de notre composant\n    \n    /*fetch(`http://localhost:3001/pokemons/${match.params.id }`) //requete de type GET en lui passant une URL\n    .then(response => response.json()) //on recupe un {}response de la part de notre méthode FETCH & methode json sur cet reponse pr extraire les datas\n    .then(pokemon => { //MAJ du pokemon ds ns composants\n      if(pokemon.id) setPokemon(pokemon); //Verification si le user request un pokemon avec un id qui existe, \n    }) //si ok on place le pokemon ds le STATE de notre composant sinn renvoi un {} vide*/\n\n    PokemonService.getPokemon(+match.params.id).then(pokemon => setPokemon(pokemon));\n\n    /* +: astuce de syntaxe de TP qui permet de convertir une string en un nbre,le routeur \n  de React ns transmet l'ID d'un pokemon ss forme de string & la method getPokemon \n  de notre service attend un nbre en paramètre\n  Method getPokemon de notre service pr recupèrer un Pokemon unique\n   */\n  }, [match.params.id]);\n    \n  return (\n    <div>\n      { pokemon ? (\n        <div className=\"row\">\n            {/*Integre de 2élements, le titre puis le formulaire d'edit°,pokemon-form*/}\n            <h2 className=\"header center\">Éditer { pokemon.name }</h2>\n            <PokemonForm pokemon={pokemon} isEditForm={true}></PokemonForm>\n            {/*on def une 'prop' pokemon pr passer au formulaire l'objet pokemon à editer*/}\n        </div>\n      ) : (\n        <h4 className=\"center\"><Loader/>{/*Aucun pokémon à afficher!*/}</h4>\n      )}\n    </div>\n  );\n}\n  \nexport default PokemonEdit;","export default class Pokemon { //class qui représente un pokemon ds notre appli\n    // 1. Typage des propiétés d'un pokémon.\n    id: number;\n    hp: number; //pts de vie \n    cp: number; //pt de degats\n    name: string; //nom du pok\n    picture: string; //url d'une image\n    types: Array<string>; //un type , eau , feu...\n    created: Date; //date de création de ce pok\n     \n    // 2. Définition des valeurs par défaut des propriétés d'un pokémon.\n    constructor(\n     id: number,\n     hp: number = 100,\n     cp: number = 10,\n     name: string = '...',\n     picture: string = 'https://assets.pokemon.com/assets/cms2/img/pokedex/detail/XXX.png',\n     types: Array<string> = ['Normal'],\n     created: Date = new Date()\n    ) {\n     // 3. Initialisation des propiétés d'un pokémons.\n     this.id = id;\n     this.hp = hp;\n     this.cp = cp;\n     this.name = name;\n     this.picture = picture;\n     this.types = types;\n     this.created = created;\n    }\n   }","import React, { FunctionComponent, useState } from 'react';\nimport PokemonForm from '../components/pokemon-form';\nimport Pokemon from '../models/pokemon';\n \nconst PokemonAdd: FunctionComponent = () => {\n\n  const [id] = useState<number>(new Date().getTime()); //on genere un id unique pr le pokemon | getTime method nativ de JS\n  const [pokemon] = useState<Pokemon>(new Pokemon(id)); //on cree un pokemon vierge en lui passant cet id\n   \n  return (\n    <div className=\"row\">\n      <h2 className=\"header center\">Ajouter un pokémon</h2>\n      <PokemonForm pokemon={pokemon} isEditForm={false}></PokemonForm>\n    </div>\n  );\n}\n \nexport default PokemonAdd;","export default class AuthenticationService {\n\n    static isAuthenticated:boolean = false; //booleen qui permet de savoir si le user crt est connect ou nn (pr def, nn car false...)\n  \n    static login(username: string, password: string): Promise<boolean> { //METHOD login via une promesse L8-12\n      const isAuthenticated = (username === 'pikachu' && password === 'pikachu'); //nom  et mot de passe\n  \n      return new Promise(resolve => {\n        setTimeout(() => {\n          this.isAuthenticated = isAuthenticated;\n          resolve(isAuthenticated);\n        }, 1000);\n      });\n    }\n  }\n\n//Un version minimum de l'authentification....","import React, { FunctionComponent, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport AuthenticationService from '../services/authentication-service';\n\ntype Field = {\n  value?: any,\n  error?: string,\n  isValid?: boolean\n};\n\ntype Form = {\n  username: Field,\n  password: Field\n}\n\nconst Login: FunctionComponent = () => {\n\n  const history = useHistory();\n\n  const [form, setForm] = useState<Form>({ //on def un STATE pr notre form (comme fait pr le form des pokemons...)\n    username: { value: '' },\n    password: { value: '' },\n  });\n\n  const [message, setMessage] = useState<string>('Vous êtes déconnecté. (pikachu / pikachu)');\n  //On save ds un etat un msg d'info globale pr le formulaire, par ex: tentative de connexion en cours (id ou pwd incorrect)\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    const fieldName: string = e.target.name;\n    const fieldValue: string = e.target.value;\n    const newField: Field = { [fieldName]: { value: fieldValue } };\n\n    setForm({ ...form, ...newField});\n  }\n\n  const validateForm = () => { //on def une METHOD pr valider les champs de notre formulaire\n    let newForm: Form = form;\n\n    // Validator username\n    if(form.username.value.length < 3) { //verif si plus de 3 caract de long...\n      const errorMsg: string = 'Votre prénom doit faire au moins 3 caractères de long.';\n      const newField: Field = { value: form.username.value, error: errorMsg, isValid: false };\n      newForm = { ...newForm, ...{ username: newField } };\n    } else {\n      const newField: Field = { value: form.username.value, error: '', isValid: true };\n      newForm = { ...newForm, ...{ username: newField } };\n    }\n\n    // Validator password\n    if(form.password.value.length < 6) { //verif si plus de 6 caract de long...\n      const errorMsg: string = 'Votre mot de passe doit faire au moins 6 caractères de long.';\n      const newField: Field = {value: form.password.value, error: errorMsg, isValid: false};\n      newForm = { ...newForm, ...{ password: newField } };\n    } else {\n      const newField: Field = { value: form.password.value, error: '', isValid: true };\n      newForm = { ...newForm, ...{ password: newField } };\n    }\n\n    setForm(newForm);\n\n    return newForm.username.isValid && newForm.password.isValid;\n  }\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => { //on gere la soumiss° de notre form\n    e.preventDefault();\n    const isFormValid = validateForm();\n    if(isFormValid) {\n      setMessage('👉 Tentative de connexion en cours ...'); //delai def 1000ms\n      AuthenticationService.login(form.username.value, form.password.value).then(isAuthenticated => {\n        if(!isAuthenticated) { //si les identifiant du user st incorrect...\n          setMessage('🔐 Identifiant ou mot de passe incorrect.');\n          return;\n        }\n        \n        history.push('/pokemons');\n        \n      });\n    }\n  }\n\n  return (\n    <form onSubmit={(e) => handleSubmit(e)}>\n      <div className=\"row\">\n        <div className=\"col s12 m8 offset-m2\">\n          <div className=\"card hoverable\">\n            <div className=\"card-stacked\">\n              <div className=\"card-content\">\n                {/* Form message pr prevenir le user ds traitements en cours */}\n                {message && <div className=\"form-group\">\n                  <div className=\"card-panel grey lighten-5\">\n                    {message}\n                  </div>\n                </div>}\n                {/* Field username */}\n                <div className=\"form-group\">\n                  <label htmlFor=\"username\">Identifiant</label>\n                  <input id=\"username\" type=\"text\" name=\"username\" className=\"form-control\" value={form.username.value} onChange={e => handleInputChange(e)}></input>\n                  {/* error */}\n                  {form.username.error &&\n                  <div className=\"card-panel red accent-1\"> \n                   {form.username.error} \n                  </div>} \n                </div>\n                {/* Field password */}\n                <div className=\"form-group\">\n                  <label htmlFor=\"password\">Mot de passe</label>\n                  <input id=\"password\" type=\"password\" name=\"password\" className=\"form-control\" value={form.password.value} onChange={e => handleInputChange(e)}></input>\n                  {/* error */}\n                  {form.password.error &&\n                  <div className=\"card-panel red accent-1\"> \n                   {form.password.error} \n                  </div>} \n                </div>\n              </div>\n              <div className=\"card-action center\">\n                {/* Submit button */}\n                <button type=\"submit\" className=\"btn\">Valider</button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </form>\n  );\n};\n \nexport default Login;","import React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport AuthenticationService from './services/authentication-service';\n \n//component vaut PokemonList et rest vaut /\nconst PrivateRoute = ({ component: Component, ...rest }: any) => (\n  <Route {...rest} render={(props) => { //render : comportement de rendu de cette route\n    const isAuthenticated = AuthenticationService.isAuthenticated; //demande au service si un user connect actuellemnt\n    if (!isAuthenticated) {    \n      return <Redirect to={{ pathname: '/login' }} /> //on redirige le user vers la page de connexion s'il n'est pas connect et de s'authentifier...\n    }\n  \n    return <Component {...props} /> //si user connect, il est re-diriger vers le composant souhaité (listes des pokemon par ex)\n  }} />\n);\n  \nexport default PrivateRoute;","import React, { FunctionComponent/*, useState, useEffect*/} from 'react';\n//import Pokemon from './models/pokemon';\n//import POKEMONS from './models/mock-pokemon';\nimport PokemonList from './pages/pokemon-list';\nimport PokemonsDetail from './pages/pokemon-detail';\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\nimport PageNotFound from './pages/page-not-found';\nimport PokemonEdit from './pages/pokemon-edit';\nimport PokemonAdd from './pages/pokemon-add';\nimport Login from './pages/login';\nimport PrivateRoute from './PrivateRoute';\n  \nconst App: FunctionComponent = () => {/*{ //def a state\n const [pokemons, setPokemons] = useState<Pokemon[]>([]);\n    \n\nuseEffect(() => { //life cycle\n    setPokemons(POKEMONS);\n}, []);*/\n\n\n return ( //Virtual DOM - utilisation de materialise (css)\n  /*<PokemonList />*/\n   <Router>\n      <div>\n          {/*La barre de nav commun à ttes ls pages*/}\n        <nav> \n          <div className=\"nav-wrapper teal\">\n            <Link to=\"/\" className=\"brand-logo center\">Pokédex</Link>\n          </div> \n        </nav>\n          {/*Le syst de gest° ds routes de notre appli*/}\n        <Switch>\n          <PrivateRoute exact path=\"/\" component={PokemonList} />\n          <Route exact path=\"/login\" component={Login}/> {/*Non proteger cr accessible à tlm*/}\n          <PrivateRoute exact path=\"/pokemons\" component={PokemonList} />\n          <PrivateRoute exact path=\"/pokemons/add\" component={PokemonAdd} />\n          <PrivateRoute exact path=\"/pokemons/edit/:id\" component={PokemonEdit} /> {/*Contient notre formulaire d'edition*/}\n          <PrivateRoute path=\"/pokemons/:id\" component={PokemonsDetail} />\n          <PrivateRoute component={PageNotFound} /> {/*attention à l'ordre de declaration ds routes*/} \n        </Switch>\n      </div>\n    </Router>\n )\n}\n  \nexport default App;","//ajout de 3 imports\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render( //METHOD render qui prend 2 parametres\n    <App />,\n    document.getElementById('root')\n);"],"sourceRoot":""}